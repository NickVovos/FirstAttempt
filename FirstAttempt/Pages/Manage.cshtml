@page
@model FirstAttempt.Pages.ManageModel
@{
}
@using Microsoft.AspNetCore.Mvc.Rendering

<style>
    /* Class to hide the select */
    .visibility-hidden {
        /*  display: none !important; */
        visibility: hidden !important;
    }
</style>

<div class="relative w-full md:w-1/4 space-y-2">
    <!-- Styled input box for searching -->
    <input type="text"
           id="CategorySearch"
           class="input w-full border rounded-lg px-4 py-2 focus:outline-none focus:ring focus:border-blue-300"
           placeholder="Search categories..."
           oninput="filterDropdown()"
           style="width:200px" />

    <!-- Custom-styled dropdown -->
    <div id="DropdownContainer" class="dropdown-container bg-white border rounded-lg shadow-md overflow-hidden hidden visibility-hidden" style="width:200px">
        <select id="CategoryFilter"
                class="select w-full h-auto border-0 focus:outline-none"
                size="5"
                onchange="handleCategoryChange(this)"
                style="width:200px">
            @Html.Raw(string.Join("", Model.CategoryOptions.Select(option =>
                     $"<option value='{option.Value}' {(option.Value == Model.CategoryFilter ? "selected" : "")}>{option.Text}</option>"
                     )))
        </select>
    </div>
</div>
asdfads
<script>
    const searchInput = document.getElementById('CategorySearch');
    const dropdownContainer = document.getElementById('DropdownContainer');
    const parentDiv = document.querySelector('.relative.w-full.md\\:w-1\\/4.space-y-2'); // Parent div selector

    /**
     * Show dropdown when input is focused
     */
    searchInput.addEventListener('focus', () => {
        dropdownContainer.classList.remove('visibility-hidden');
        dropdownContainer.classList.remove('hidden');
    });

    /**
     * Hide dropdown when clicking outside of the parent div
     */
    document.addEventListener('click', (event) => {
        if (!parentDiv.contains(event.target)) {
            dropdownContainer.classList.add('visibility-hidden');
        }
    });

    /**
     * Dynamically filter dropdown options based on input
     */
    function filterDropdown() {
        const query = searchInput.value.toLowerCase();
        const options = document.getElementById('CategoryFilter').options;

        for (let i = 0; i < options.length; i++) {
            const optionText = options[i].text.toLowerCase();
            options[i].style.display = optionText.includes(query) ? "" : "none";
        }
    }

    /**
     * Handle dropdown change
     */
    function handleCategoryChange(select) {
        const selectedText = select.options[select.selectedIndex].text;
        const selectedValue = select.value;

        if (selectedValue === "new") {
            const newCategory = prompt("Enter the new category:");
            if (newCategory) {
                const newOption = new Option(newCategory, newCategory);
                select.add(newOption, select.options.length - 1);
                select.value = newCategory;
                searchInput.value = newCategory; // Update input value
            }
        } else {
            searchInput.value = selectedText;
        }

        dropdownContainer.classList.add('visibility-hidden');
    }
</script>

@* 
<div class="space-y-6">
    <form method="post">
        <div class="flex flex-col md:flex-row gap-4">
            <input type="text"
                   name="SearchTerm"
                   class="input md:w-1/3"
                   placeholder="Search recipes..."
                   value="@Model.SearchTerm" />

            <select name="CategoryFilter"
                    class="select md:w-1/4"
                    value="@Model.CategoryFilter">
                <option value="all">All Categories</option>
                <option value="Main">Main</option>
                <option value="Dessert">Dessert</option>
                <option value="Appetizer">Appetizer</option>
                <option value="Beverage">Beverage</option>
            </select>

            <button type="submit" class="btn">Filter</button>
        </div>
    </form>

    <table class="table-auto w-full">
        <thead>
            <tr>
                <th>Recipe Title</th>
                <th>Category</th>
                <th>Description</th>
                <th class="text-right">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var recipe in Model.FilteredRecipes)
            {
                <tr>
                    <td>@recipe.Title</td>
                    <td>@recipe.Category</td>
                    <td>@recipe.Description</td>
                    <td class="text-right">
                        <form method="post">
                            <input type="hidden" name="RecipeId" value="@recipe.Id" />
                            <button type="submit" name="action" value="View" class="btn btn-outline">View</button>
                            <button type="submit" name="action" value="Modify" class="btn btn-outline">Modify</button>
                            <button type="submit" name="action" value="Delete" class="btn btn-outline">Delete</button>
                        </form>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (Model.RecipeToDelete != null)
    {
        <div class="modal">
            <div class="modal-content">
                <h2>Delete Recipe</h2>
                <p>Are you sure you want to delete "@Model.RecipeToDelete.Title"? This action cannot be undone.</p>
                <form method="post">
                    <input type="hidden" name="DeleteRecipeId" value="@Model.RecipeToDelete.Id" />
                    <button type="submit" name="action" value="Cancel" class="btn">Cancel</button>
                    <button type="submit" name="action" value="ConfirmDelete" class="btn btn-danger">Delete</button>
                </form>
            </div>
        </div>
    }
</div> *@